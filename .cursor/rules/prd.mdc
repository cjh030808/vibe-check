---
description: 
globs: 
alwaysApply: false
---
VibeCheck: Product Requirements Document (PRD)
Author: World-Class Senior Frontend Engineer
Version: 1.0
Date: July 24, 2024
1. Introduction & Vision
VibeCheck is a rapid, creative prototyping and model-comparison tool designed to showcase the generative capabilities of Google's Gemini models. It provides a dynamic playground for developers, designers, and prompt engineers to instantly test and visualize outputs across various modalities, from interactive code sketches to static images.
The core vision is to create an intuitive, "hands-on" experience that bridges the gap between a text prompt and its tangible, multi-faceted result. Users can compare model performance side-by-side, batch-test creative ideas, and find inspiration, all within a single, streamlined interface.
2. Target Audience
Creative Coders & Digital Artists: Individuals who use code as an artistic medium (e.g., P5.js, Three.js, SVG) and want to leverage AI for inspiration or asset generation.
Prompt Engineers & AI Enthusiasts: Users focused on crafting and refining prompts to understand and compare the nuances of different generative models.
Frontend Developers & UI/UX Designers: Professionals looking to quickly prototype UI components, visual concepts, or micro-interactions using generative AI.
Educators & Students: Those in the fields of creative technology and AI who need a simple tool for demonstrating generative concepts.
3. Goals & Objectives
Product Goal: Provide a powerful and engaging tool for exploring and comparing Gemini model capabilities in a visual context.
User Goal: Effortlessly test prompts, compare model outputs, and discover creative possibilities without complex setup or configuration.
Technical Goal: Demonstrate best practices for integrating the @google/genai SDK in a performant, responsive, and aesthetically pleasing React application.
4. Key Features & Functionality
4.1. Core Modes
Batch Mode: Generate multiple visual outputs (1-9) from a single prompt using a single selected model. This is ideal for exploring the range of creativity and variance within one model.
Versus Mode: Generate one output for each selected model from a single prompt. This allows for direct, side-by-side comparison of different models' interpretations, styles, and capabilities.
4.2. Output Types
Users can select the desired format for the generative output:
P5.js: For generating interactive and animated 2D sketches.
SVG: For generating scalable vector graphics.
HTML/JS: For generating self-contained web apps and UI components.
Three.js: For generating interactive 3D scenes.
Images: For generating static images from text prompts (Note: this mode is only available in Batch Mode).
4.3. Control Panel & Inputs
Prompt Input: A central text field for entering prompts. Supports quick execution with the "Enter" key.
Model Selector: A dropdown to select one model for Batch Mode or multiple models for Versus Mode.
Output Mode Selector: A dropdown to switch between P5.js, SVG, HTML/JS, etc.
Batch Size Slider: An intuitive slider to adjust the number of generations in Batch Mode.
Prompt Presets: A curated, shuffle-able list of example prompts for each output mode to provide inspiration and a low-barrier entry point.
Image Input: A drag-and-drop area or file picker to provide an input image when generating in Image mode.
Reset Button: A one-click action to clear the feed and reset the application state.
Theme Toggle: Switch between light and dark UI themes.
4.4. Results Feed & Output Display
Main Feed: All generations are organized into "rounds" in a reverse chronological feed. Each round contains the prompt and the resulting outputs.
Interactive Rendering: Code-based outputs (HTML, P5, etc.) are rendered in a sandboxed <iframe> to display the live, interactive result.
Source Code View: Users can "flip" any code-based output card to view the syntax-highlighted source code generated by the model.
Loading & Error States: Each output card clearly indicates its status, showing a loading animation while busy and a distinct error message if the generation fails.
Performance Metrics: Each output displays the model name and the total generation time in seconds.
4.5. Round & Output Actions
For each round and individual output, users have a set of quick actions:
Re-run Prompt: Run the same prompt again to get a new set of results.
Modify Prompt: Copies the prompt back into the main input field for easy editing and iteration.
Remove Round: Deletes an entire prompt round from the feed.
View System Instruction: Toggles the visibility of the system instruction used for that generation.
Copy Source/Image: A one-click button to copy the generated source code or image to the clipboard.
5. UI/UX Design
Aesthetic: Clean, modern, and developer-centric, with a "monospace" font feel. It prioritizes clarity and function while maintaining a visually pleasing dark/light theme.
Layout: A persistent header contains all controls for easy access, while the main body of the page is dedicated to the results feed. This keeps the context of the controls visible while scrolling through results.
Responsiveness: The layout is fully responsive, gracefully collapsing controls and adjusting grid columns to provide an optimal experience on both desktop and mobile devices.
Interactivity: The UI uses subtle animations for feedback (e.g., card fade-in, loader spin). Interactive elements have clear hover states, and complex options are hidden in accessible dropdowns to reduce clutter. Tooltips are used extensively to provide context on icon buttons.
6. Technical Requirements
Framework: React
State Management: Zustand (with Immer for immutability)
API: Google Gemini API (@google/genai SDK)
Styling: Standard CSS with custom properties for easy theming.
Dependencies: clsx for conditional classes, react-syntax-highlighter for code display.
Security: All generated code is rendered in a sandboxed <iframe> to prevent malicious scripts from accessing the parent document. The API key is managed securely as an environment variable and is not exposed to the client.
7. Future Enhancements (Roadmap)
Video Generation: Add a new output mode for veo-2.0-generate-001 to generate short video clips.
Streaming Support: Stream text-based results (like HTML source) token-by-token for a more responsive feel.
Sharing & Permalinks: Allow users to share a specific round or output via a unique URL.
Prompt History: Save a user's prompt history locally for easy access and reuse.
Advanced Controls: Expose more model parameters in the UI, such as temperature, topK, and negative prompts.